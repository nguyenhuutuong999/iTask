{"version":3,"sources":["components/TaskForm.js","actions/index.js","constants/ActionTypes.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/searchKeyWord.js","reducers/sortTable.js","reducers/index.js","index.js"],"names":["TaskForm","props","onCloseForm","onChange","event","target","name","value","setState","onSubmit","preventDefault","onSaveTask","state","onClear","status","id","this","taskEditing","nextProps","className","aria-hidden","onClick","type","required","Component","connect","itemEditing","dispatch","task","actions","TaskItem","onUpdateStatus","onUpdate","onOpenForm","updateItem","onDeleteItem","index","TaskList","filter","filterName","parseInt","filterStatus","onFilterTable","console","log","sortBy","sortValue","sort","by","onSort","onToggleForm","onClearForm","tasks","keyWord","toLowerCase","indexOf","a","b","tasksClose","tasksOpen","elTasksClose","map","key","elTasksOpen","placeholder","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","filterTable","searchKeyWord","sortTable","App","isDisplayForm","style","width","Boolean","window","location","hostname","match","s4","Math","floor","random","toString","substring","generateID","findIndex","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","push","setItem","stringify","splice","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6c12117.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {connect} from 'react-redux';\nimport * as actions from './../actions/index';\n\nclass TaskForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: \"\",\n      name: \"\",\n      status: false,\n    };\n  }\n  //chỉ nhận giá trị một lần khi gọi\n  componentDidMount() {\n  \n    if (this.props.taskEditing && this.props.taskEditing.id !== '') { \n      this.setState({\n        id: this.props.taskEditing.id,\n        name: this.props.taskEditing.name,\n        status: this.props.taskEditing.status,\n      });\n  \n    }else{\n      this.setState({\n        id: \"\",\n        name: \"\",\n        status: false,\n      });\n    \n    }\n  }\n  // nhận bất cứ khi nào truyền props ko chỉ 1 lần\n  componentWillReceiveProps(nextProps) {\n   \n    if (nextProps.taskEditing) {\n      this.setState({\n        id: nextProps.taskEditing.id,\n        name: nextProps.taskEditing.name,\n        status: nextProps.taskEditing.status,\n      });\n      // truong hợp bấm vào work rồi chuyển sang update\n    } else if (nextProps.taskEditing === null) {\n      this.setState({\n        id: \"\",\n        name: \"\",\n        status: false,\n      });\n    }\n  }\n  \n  onCloseForm = () => {\n    \n    this.props.onCloseForm();\n  };\n  onChange = (event) => {\n    var target = event.target;\n    var name = target.name;\n    var value = target.value;\n\n    if (name === \"status\") {\n      value = target.value === \"true\" ? true : false;\n    }\n    this.setState({\n      [name]: value,\n    });\n  };\n  onSubmit = (event) => {\n    event.preventDefault();\n    this.props.onSaveTask(this.state);\n    \n    this.onClear();\n    this.onCloseForm();\n  };\n  onClear = () => {\n    this.setState({\n      name: \"\",\n      status: false,\n    });\n  };\n  render() {\n    var { id } = this.state;\n    return (\n      //TaskForm\n      \n      <div className=\"panel panel-warning\">\n        <div className=\"panel-heading\">\n          <h3 className=\"panel-title\">\n            {id  !== ''? \"Update ToDo\" :  \"Add ToDo\" }\n            <i\n\n              \n              className=\"fa fa-times-circle \"\n              aria-hidden=\"true\"\n              onClick={this.onCloseForm}\n             \n            ></i>\n          </h3>\n        </div>\n        <div className=\"panel-body\">\n          <form onSubmit={this.onSubmit}>\n          \n\n            <div className=\"form-group\">\n              <label>Title</label>\n              <input\n                type=\"text\"\n                value={this.state.name}\n                name=\"name\"\n                onChange={this.onChange}\n                className=\"form-control\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Status</label>\n              <select\n                className=\"form-control\"\n                name=\"status\"\n                value={this.state.status}\n                onChange={this.onChange}\n                required=\"required\"\n              >\n                <option value={true}>Done</option>\n                <option value={false}>Todo</option>\n              </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-success\">\n              Add\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={this.onClear}\n            >\n              Cancel\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) =>{\n  return{\n      taskEditing: state.itemEditing,\n  }\n};\n\nconst mapDispatchToProps = (dispatch, props) =>{\n  return{\n    onSaveTask : (task) =>{\n      dispatch(actions.saveTask(task));\n    },\n    onCloseForm : () =>{ \n      dispatch(actions.closeForm());\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\n","import * as types from './../constants/ActionTypes';\r\n\r\nexport const listAll = () => {\r\n    return {\r\n        type: types.LIST_ALL\r\n    }\r\n}\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type: types.SAVE_TASK,\r\n        task //task: task\r\n    }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n    return {\r\n        type: types.TOGGLE_FORM,\r\n        \r\n    }\r\n}\r\nexport const openForm = () => {\r\n    return {\r\n        type: types.OPEN_FORM,\r\n        \r\n    }\r\n}\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM,\r\n    }\r\n}\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type: types.UPDATE_STATUS,\r\n        id,\r\n    }\r\n}\r\nexport const deleteItem = (id) => {\r\n    return {\r\n        type: types.DELETE_ITEM,\r\n        id,\r\n    }\r\n}\r\nexport const updateItem = (task) => {\r\n    return {\r\n        type: types.UPDATE_ITEM,\r\n        task,\r\n    }\r\n}\r\nexport const clearForm = () => {\r\n    return {\r\n        type: types.CLEAR_FORM ,\r\n       \r\n    }\r\n}\r\nexport const filterTable = (filter) => {\r\n    return {\r\n        type: types.FILTER_TABLE ,\r\n        filter,\r\n    }\r\n}\r\nexport const search = (keyWord) => {\r\n    return {\r\n        type: types.SEARCH ,\r\n        keyWord,\r\n    }\r\n}\r\nexport const sort = (sort) => {\r\n    return {\r\n        type: types.SORT ,\r\n        sort,\r\n    }\r\n}\r\n","export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\r\nexport const UPDATE_ITEM = 'UPDATE_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const CLEAR_FORM = 'CLEAR_FORM';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./../actions/index\";\n\nclass TaskItem extends Component {\n  onUpdateStatus = () => {\n    this.props.onUpdateStatus(this.props.task.id);\n  };\n  onUpdate = () => {\n    this.props.onOpenForm();\n    this.props.updateItem(this.props.task);\n  };\n  onDeleteItem = () => {\n    this.props.onDeleteItem(this.props.task.id);\n    this.props.onCloseForm();\n    //dispatch(actions.deleteItem)\n  };\n\n  render() {\n    var { task, index } = this.props;\n    return (\n      <div className={task.status === true ? \"card bg-success\" : \"card bg-danger\"} >\n        <div className=\"title\">\n          <h4 className={task.status === true ? \"text-success\" : \"text-danger\"}>\n            {index + 1}\n          </h4>\n          <button\n            className={\n              task.status === false ? \"btn btn-success\" : \"btn btn-danger\"\n            }\n            onClick={this.onUpdateStatus}\n          >\n            {task.status === false ? \"Close\" : \"Open\"}\n          </button>\n        </div>\n        <hr/>\n        <p className=\"content\">{task.name}</p>\n        <p className=\"mg-t50\">\n          <button\n            type=\"button\"\n            className=\"btn btn-edit\"\n            onClick={this.onUpdate}\n          >\n            <span className=\"fa fa-pencil mr-5\"></span>\n          </button>\n          &nbsp;\n          <button\n            type=\"button\"\n            className=\"btn btn-delete\"\n            onClick={this.onDeleteItem}\n          >\n            <span className=\"fa fa-trash mr-5\"></span>\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {};\n};\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onUpdateStatus: (id) => {\n      dispatch(actions.updateStatus(id));\n    },\n    onDeleteItem: (id) => {\n      dispatch(actions.deleteItem(id));\n    },\n    onCloseForm: () => {\n      dispatch(actions.closeForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    },\n    updateItem: (task) => {\n      dispatch(actions.updateItem(task));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);\n","import React, { Component } from \"react\";\nimport TaskItem from \"./TaskItem\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./../actions/index\";\n\nclass TaskList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterName: \"\",\n      filterStatus: -1,\n      sort: {\n        by: \"name\",\n        value: 1,\n      },\n    };\n  }\n\n  onChange = (event) => {\n    var target = event.target;\n    var name = target.name;\n    var value = target.value;\n    var filter = {\n      name: name === \"filterName\" ? value : this.state.filterName,\n      status:\n        name === \"filterStatus\" ? parseInt(value) : this.state.filterStatus,\n    };\n    this.props.onFilterTable(filter);\n    this.setState({\n      [name]: value,\n    });\n    console.log(this.state);\n  };\n  onClick = (sortBy, sortValue) => {\n    // nên dùng một biến trung gian, không nên set trực tiếp vì khả năng props sẽ chạy sau setState\n    var sort = {\n      by: sortBy,\n      value: sortValue,\n    };\n    this.setState({\n      sort: {\n        by: sortBy,\n        value: sortValue,\n      },\n    });\n    this.props.onSort(sort);\n  };\n  onToggleForm = () => {\n    //trường hợp đang sử dụng update chuyển sang work\n    var { itemEditing } = this.props;\n    if (itemEditing && itemEditing.id !== \"\") {\n      this.props.onOpenForm();\n    } else {\n      this.props.onToggleForm();\n    }\n    this.props.onClearForm();\n  };\n\n  render() {\n    var { tasks, filter, keyWord, sort } = this.props;\n\n    //search key word\n    if (keyWord) {\n      tasks = tasks.filter((task) => {\n        return task.name.toLowerCase().indexOf(keyWord.toLowerCase()) !== -1;\n      });\n    }\n\n    // sort\n\n    if (sort.by === \"name\") {\n      tasks = tasks.sort((a, b) => {\n        if (a.name > b.name) return sort.value;\n        else if (a.name < b.name) return -sort.value;\n        else return 0;\n      });\n    } else {\n      tasks = tasks.sort((a, b) => {\n        if (a.status > b.status) return -sort.value;\n        else if (a.status < b.status) return sort.value;\n        else return 0;\n      });\n    }\n    //filter function\n\n    if (filter.name) {\n      tasks = tasks.filter((task) => {\n        return task.name.toLowerCase().indexOf(filter.name) !== -1;\n      });\n    }\n    tasks = tasks.filter((task) => {\n      if (filter.status === -1) {\n        return tasks;\n      } else {\n        return task.status === (filter.status === 1 ? true : false);\n      }\n    });\n    var tasksClose = tasks.filter((task) => {\n      return task.status === true;\n    });\n    var tasksOpen = tasks.filter((task) => {\n      return task.status === false;\n    });\n    // var tasks = this.props.tasks\n    var elTasksClose = tasksClose.map((task, index) => {\n      return <TaskItem key={task.id} index={index} task={task} />;\n    });\n    var elTasksOpen = tasksOpen.map((task, index) => {\n      return <TaskItem key={task.id} index={index} task={task} />;\n    });\n\n    return (\n      <div className=\"center col-xs-12 col-sm-12 col-md-12 col-lg-12 \">\n        <table className=\"table table-hover\">\n          <tbody>\n            <tr>\n              <td>\n                <button\n                  id=\"toggle\"\n                  type=\"button\"\n                  className=\"btn btn-warning\"\n                  onClick={this.onToggleForm}\n                >\n                  <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n                  Add Todo\n                </button>\n              </td>\n              <td className=\"col-xs-5 col-sm-5 col-md-5 col-lg-5\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={this.state.filterName}\n                  name=\"filterName\"\n                  onChange={this.onChange}\n                  placeholder=\"Search Title...\"\n                />\n              </td>\n              <td>\n                <div className=\"dropdown\">\n                  <button\n                    className=\"btn btn-infor dropdown-toggle\"\n                    type=\"button\"\n                    id=\"dropdownMenu1\"\n                    data-toggle=\"dropdown\"\n                    aria-haspopup=\"true\"\n                    aria-expanded=\"true\"\n                  >\n                    Sort{\" \"}\n                    <span className=\"fa fa-caret-square-o-down ml-5\"></span>\n                  </button>\n                  <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                    <li onClick={() => this.onClick(\"name\", 1)}>\n                      <p role=\"button\">\n                        <span className=\"fa fa-sort-alpha-asc pr-5\">\n                          Tên A-Z{\" \"}\n                          <i\n                            className={\n                              sort.by === \"name\" && sort.value === 1\n                                ? \"fa fa-check\"\n                                : \"\"\n                            }\n                          ></i>\n                        </span>\n                      </p>\n                    </li>\n\n                    <li onClick={() => this.onClick(\"name\", -1)}>\n                      <p role=\"button\">\n                        <span className=\"fa fa-sort-alpha-desc pr-5\">\n                          Tên Z-A{\" \"}\n                          <i\n                            className={\n                              sort.by === \"name\" && sort.value === -1\n                                ? \"fa fa-check\"\n                                : \"\"\n                            }\n                          ></i>\n                        </span>\n                      </p>\n                    </li>\n                  </ul>\n                </div>\n              </td>\n            </tr>\n            {/* TaskItem */}\n          </tbody>\n        </table>\n\n        <div className=\"card-deck mb-4\">\n          <div className=\"col-xs-6\">\n            <h3 className=\"text-center red\">ToDo</h3>\n            <div className=\"flex-box col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n              {elTasksOpen}\n            </div>\n          </div>\n          <div className=\"ver-line\"></div>\n          <div className=\"col-xs-6\">\n            <h3 className=\"text-center green\">Done</h3>\n\n            <div className=\"flex-box col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n              {elTasksClose}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    tasks: state.tasks,\n    filter: state.filterTable,\n    keyWord: state.searchKeyWord,\n    sort: state.sortTable,\n    itemEditing: state.itemEditing,\n  };\n};\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onFilterTable: (filter) => {\n      dispatch(actions.filterTable(filter));\n    },\n    onSort: (sort) => {\n      dispatch(actions.sort(sort));\n    },\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onClearForm: () => {\n      dispatch(actions.clearForm());\n    },\n    onOpenForm: () => {\n      dispatch(actions.openForm());\n    },\n  };\n};\nexport default connect(mapStatetoProps, mapDispatchToProps)(TaskList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport TaskForm from \"./components/TaskForm\";\n\nimport TaskList from \"./components/TaskList\";\n\nclass App extends Component {\n  render() {\n    var { isDisplayForm } = this.props;\n   // var showTaskForm = isDisplayForm ?<div className=\"col-xs-3 toggle-open\"> <TaskForm /> </div> :\"\" ;\n\n    return (\n      <div className=\"\">\n         <h2 className=\"text-center\" id=\"abc\">I Do, You Do ???</h2>\n        <div className=\"row\">\n          \n            {/* TaskForm */}\n            {/* {showTaskForm} */}\n            <div style={{width:isDisplayForm ? \"22%\" : \"0px\"}} className=\"col-xs-3 toggle\"><TaskForm /></div>\n          \n            <div style ={{width:isDisplayForm ? \"78%\" : \"80%\"}} className= \"container toggle-resize \">\n             \n       \n              {/* Search and Sort */}\n\n              {/* TaskList */}\n              <TaskList />\n            </div>\n          </div>\n        </div>\n      \n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n  };\n};\nexport default connect(mapStateToProps, null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from \"./../constants/ActionTypes\";\r\n\r\nvar s4 = () => {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);\r\n};\r\nvar generateID = () => {\r\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4();\r\n};\r\nvar findIndex = (tasks, id) => {\r\n  var result = -1;\r\n  tasks.forEach((task, index) => {\r\n    if (task.id === id) {\r\n      result = index;\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\n\r\n\r\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\r\nvar initialState = data ? data : [\r\n    {\r\n      id : generateID(),\r\n      name: \"sleep\",\r\n      status: false,\r\n    },\r\n    {\r\n      id : generateID(),\r\n      name: \"Study ReactJS\",\r\n      status: true,\r\n    },\r\n    {\r\n      id : generateID(),\r\n      name: \"Study React-Redux\",\r\n      status: true,\r\n    }\r\n];\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n  var index = '';\r\n  switch (action.type) {\r\n    \r\n    case types.LIST_ALL: {\r\n      return state;\r\n    }\r\n    case types.SAVE_TASK: {\r\n      var task = {\r\n        id : action.task.id,\r\n        name: action.task.name,\r\n        status: action.task.status,\r\n      };\r\n      if(!task.id){\r\n        task.id = generateID();\r\n        state.push(task);\r\n      }else{\r\n       index = findIndex(state, task.id);\r\n        state[index] = task;\r\n      }\r\n     \r\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n      return [...state];\r\n    }\r\n    case types.UPDATE_STATUS: {\r\n      index = findIndex(state, action.id);\r\n      // tối ưu việc tìm kiếm index bằng lodash\r\n      //var index = findIndex(tasks, (task) => task.id === action.id)\r\n      if (index !== -1) {\r\n        state[index] = {\r\n          ...state[index],\r\n          status: !state[index].status,\r\n        };\r\n      }\r\n\r\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n\r\n      return [...state];\r\n    }\r\n    case types.DELETE_ITEM: {\r\n      index = findIndex(state, action.id);\r\n      if (index !== -1) {\r\n        state.splice(index, 1);\r\n      }\r\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n      return [...state];\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default myReducer;\r\n","import * as types from './../constants/ActionTypes';\r\n\r\n\r\n\r\nvar initialState = false;\r\n\r\nvar myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.TOGGLE_FORM:{\r\n            \r\n            return !state;\r\n        }\r\n       case types.CLOSE_FORM:{\r\n           return false;\r\n       }\r\n       case types.OPEN_FORM:{\r\n           return true;\r\n       }\r\n        default: return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\nvar initialState = {  \r\n    id: \"\",\r\n    name: \"\",\r\n    status: false,\r\n};\r\n\r\nvar myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.UPDATE_ITEM:{\r\n            \r\n            return action.task;\r\n        }\r\n        case types.CLEAR_FORM:{\r\n            return {  \r\n                id: \"\",\r\n                name: \"\",\r\n                status: false,\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\nvar initialState = {  \r\n   name: '',\r\n   status: -1,\r\n};\r\n\r\nvar myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.FILTER_TABLE:{\r\n            return {\r\n                name:action.filter.name,\r\n                status:parseInt(action.filter.status),\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\nvar initialState = '';\r\n\r\nvar myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case types.SEARCH:{\r\n            return action.keyWord;\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\nvar initialState = {  \r\n   by: 'name',\r\n   value: 1,\r\n};\r\n\r\nvar myReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n\r\n        case types.SORT:{\r\n           state = {\r\n            by: action.sort.by,\r\n            value: action.sort.value,\r\n           }\r\n            return state;\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\nexport default myReducer;","import {combineReducers} from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport itemEditing from './itemEditing';\r\nimport filterTable from './filterTable';\r\nimport searchKeyWord from  './searchKeyWord';\r\nimport sortTable from  './sortTable';\r\n\r\nconst myReducer =  combineReducers({\r\n    tasks,\r\n    isDisplayForm,\r\n    itemEditing,\r\n    filterTable,\r\n    searchKeyWord,\r\n    sortTable,\r\n     //tasks: tasks\r\n});\r\n\r\nexport default myReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport myReducer from \"./reducers/index\";\n\nconst store = createStore(myReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}